import copy


# 当一个变量=XXX的时候，约定为这个变量指向了这个XXX
a = [11, 22]

# copy.copy() 能够完成浅拷贝的功能
a = [11, 22]    # a 指向列表
b = [33, 44]    # b 指向另外一个列表
c = [a, b]      # c 指向一个列表，而a，b分别指向上边的列表(对象的引用)
d = c
e = copy.copy(c)    # e 指向了一个新的列表  实际上只拷贝最上面一层即：你让我拷c 那我就只拷贝c 里的东西，而c 里面指向的东西不拷  让e指向一个新的

# copy.deepcopy() 能够完成深拷贝的功能
f = copy.deepcopy(c)    # f 指向了一个c 的列表 完全拷贝了，c 里面嵌套的列表也一起拷贝了  再改变c 里面的 列表a 、b 对f 没有影响了

# 注意：如果copy.copy() 或者 deepcopy() 拷贝的是元组的话，那么它不会进行浅拷贝，仅仅是指向， 原因是：元组是不可变类型，那么意味着数据一定不能修改，因此copy.copy() 时会自动判断  如果是元组它就是指向它而不会再复制一份。
#  如果元组里只有普通的数据简而言之都是不可变得，那么copy和deepcopy它都不会拷贝只是指向
#  如果元组里面有指向的可变类型的数据，用copy时仍然不拷贝，而deepcopy会进行拷贝而且是深拷贝


